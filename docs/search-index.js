crystal_doc_search_index_callback({"repository_name":"Crystal Config","body":"# Crystal Config\nFind the full documentation [here](http://troy.sornson.io/cr-config/#examples)\n\nThis library aims to provide robust configuration management for long running crystal processes\nwhere a CLI interface isn't enough. It aims to provide these configurations through a strongly\ntyped class. Goals are:\n\n- [X] Declarative construction of config files (through macro driven classes)\n- [X] Supports property loading hierarchy\n- [X] * Supports loading from file\n- [X] ** Supports JSON\n- [X] ** Supports YAML\n- [X] ** Supports dotenv files\n- [X] ** Load different config file based on environment\n- [X] * Supports loading from environment variables\n- [X] * Supports loading from command line argument overrides (does not conflict with option_parser)\n- [X] * hierarchy can be configured\n- [X] * can support custom config loaders\n- [X] Supports runtime config overrides\n- [X] Supports property validators\n- [ ] Supports enum values\n- [ ] Supports lists of subconfigs\n- [ ] Auto generated config files if missing\n- [ ] New configurations automatically get added to config file if missing\n\n# Examples\n\n## Defining a configuration class\n\n```crystal\nrequire \"cr-config\"\n\nclass ServerConfig\n  include CrConfig\n\n  option domain : String\n  option ports : Array(Int32)\n  option timeout : Float32\n\n  option client : ClientConfig\n  option database : Database\nend\n\nclass ClientConfig\n  include CrConfig\n\n  option host : String\n  option port : Int32?\n  option auth_token : String\nend\n\nclass Database\n  include CrConfig\n\n  option hostname : String, default: \"localhost\"\n  option port : Int32\n  option schema : String, default: \"http\"\n  option username : String?\n  option password : String?\nend\n\n# ...Configure providers, validators, interceptors here. See examples below...\n\nconfig = ServerConfig.instance # Will load and create a new instance of the config. Can be called repeatedly and it only loads the first time\n\nconfig.domain            # => All valid properties of the relevant type\nconfig.ports             # => All valid properties of the relevant type\nconfig.timeout           # => All valid properties of the relevant type\nconfig.database.hostname # => All valid properties of the relevant type\nconfig.database.port     # => All valid properties of the relevant type\nconfig.database.schema   # => All valid properties of the relevant type\nconfig.database.username # => All valid properties of the relevant type\nconfig.database.password # => All valid properties of the relevant type\n\n```\n\nThe `option` macro can work with `String`, `Int32`, `Int64`, `Float32`, `Float64`, `Bool`, `UInt32`, `UInt64`, `Array`'s of any\nof those, and any other configuration class (but NOT `Array`'s of other configuration classes, though it's on the wishlist).\n\n## Configuration Providers\nConfiguration providers are, well, providers of configuration. During the creation and loading of a config class,\nconfiguration providers are iterated through to obtain the config values and store them into the config class.\nCrystal Config provides a list of some standard ones, but also provides a way for custom providers to be implemented.\n\n```crystal\n# Using above example classes\n\n# We use the static method to define a list of providers that we want to provide configuration for us.\n# The order of the list matters - this will be the order that the providers get run in, and define the\n# order of precedence on which value gets set if it's found from multiple providers.\n# Last config provider wins.\nServerConfig.providers do\n  [\n    CrConfig::SimpleFileProvider(\"config.json\"), # This will read a named config file, supporting json, yaml, and .env file formats\n    CrConfig::EnvVarProvider.new,                # Let environment variables set (and override) configuration values\n    CrConfig::CommandLineParser.new              # Let the command line start up of the server also provide a way to override config values (useful for devs)\n  ]\nend\n\n# Custom providers can be defined through a block, the builder that's passed in has a single method of `.set(\"<name>\", val)`\n# and is shared across all providers. Calling `set` will return true if a config value was set, or false if the config name\n# doesn't exist.\n#\n# There are no limits to how many custom providers can be defined through the `provider` method, they will all be added\n# sequentially to the same list of config providers.\nServerConfig.provider do |builder|\n  builder.set(\"database.hostname\", \"example.com\")\nend\n\n# The below call will trigger the above providers to be iterated through to construct the instance of ServerConfig\ns = ServerConfig.instance\ns.database.hostname # => \"example.com\"\n\n```\n\n## Configuration Validators\nValidators are custom validators that will be run on all configurations during building of the config class. Crystal\nConfig already validates that values are not-nil (where appropriate) and of the type they need to be, but extra\nvalidation might be needed to ensure bad configuration values don't cause problems.\n\n```crystal\n# Using the above example classes\n\n# This example uses a single validator, but multiple can be defined through the `validator` method sequentially,\n# and they'll be called in the order they're defined.\nServerConfig.validator do |name, val|\n  next if name == \"schema\"\n\n  if val != \"https\" && val != \"http\"\n    raise \"Unsupported server schema #{val}, expected 'http' or 'https'\"\n  end\nend\n\nServerConfig.provider do |builder|\n  builder.set(\"schema\", \"nope\")\nend\n\nServerConfig.instance # => ConfigException(name: \"schema\", type: CustomValidatorError, message: \"...\")\n\n```\n\n## Runtime Configuration Interceptors\nAfter a configuration class has been built and set, it can be desirable to temporarily override those values\nto something else (i.e. temporarily reroute requests to a different hostname).\n\n```crystal\n# Using above example classes\n\nuse_stable = false\nServerConfig.runtime_interceptor do |name, real_val|\n  next unless name == \"client.host\"\n\n  next \"stable.example.com\" if use_stable\nend\n\nServerConfig.provider do |builder|\n  builder.set(\"client.host\", \"example.com\")\nend\n\ns = ServerConfig.instance\n\ns.client.host # => example.com\n\nuse_stable = true\ns.client.host # => stable.example.com\n```\n\nIronically, runtime interceptors can't be further configured at runtime, only at config build time.\n","program":{"html_id":"Crystal Config/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"Crystal Config","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Crystal Config/CrConfig","path":"CrConfig.html","kind":"module","full_name":"CrConfig","name":"CrConfig","abstract":false,"superclass":null,"ancestors":[{"html_id":"Crystal Config/CrConfig/Macros","kind":"module","full_name":"CrConfig::Macros","name":"Macros"},{"html_id":"Crystal Config/CrConfig/BuilderMacro","kind":"module","full_name":"CrConfig::BuilderMacro","name":"BuilderMacro"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":4,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L4"},{"filename":"src/cr-config/builder_macro.cr","line_number":4,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L4"},{"filename":"src/cr-config/config_base.cr","line_number":4,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_base.cr#L4"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"SUPPORTED_TYPES","name":"SUPPORTED_TYPES","value":"{\"Array(Bool)\", \"Array(Float32)\", \"Array(Float64)\", \"Array(Int32)\", \"Array(Int64)\", \"Array(String)\", \"Array(UInt32)\", \"Array(UInt64)\", \"Bool\", \"Float32\", \"Float64\", \"Int32\", \"Int64\", \"String\", \"UInt32\", \"UInt64\"}","doc":null,"summary":null}],"included_modules":[{"html_id":"Crystal Config/CrConfig/BuilderMacro","kind":"module","full_name":"CrConfig::BuilderMacro","name":"BuilderMacro"},{"html_id":"Crystal Config/CrConfig/Macros","kind":"module","full_name":"CrConfig::Macros","name":"Macros"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"option(name,default=nil)-macro","html_id":"option(name,default=nil)-macro","name":"option","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"default","doc":null,"default_value":"nil","external_name":"default","restriction":""}],"args_string":"(name, default = <span class=\"n\">nil</span>)","location":{"filename":"src/cr-config/config_base.cr","line_number":22,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_base.cr#L22"},"def":{"name":"option","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"default","doc":null,"default_value":"nil","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% CONFIG_PROPS[name.var] = {name: name.var, type: name.type, is_base_type: SUPPORTED_TYPES.includes?(\"#{name.type.types[0]}\"), base_type: name.type.types[0], nilable: name.type.types.map do |x|\n  \"#{x.id}\"\nend.includes?(\"Nil\"), default: default} %}\n\n  \n"}}],"types":[{"html_id":"Crystal Config/CrConfig/AbstractBuilder","path":"CrConfig/AbstractBuilder.html","kind":"class","full_name":"CrConfig::AbstractBuilder","name":"AbstractBuilder","abstract":true,"superclass":{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":10,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L10"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":"Base class for configuration builders. All includers of CrConfig will have a builder\ngenerated for them extending this class.\n\nThis builder represents a \"safe\" instantiation of a config class, where all types are\nnilable and mutable. Use the `build` method to contruct the immutable form of your config.","summary":"<p>Base class for configuration builders.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"build-instance-method","html_id":"build-instance-method","name":"build","doc":"Build an instance of the config class. This method will:\n1. Iterate and invoke all available and configured providers for this config class\n2. Run validators on the resulting set of configuration values, both standard and custom\n3. Construct and wire in the runtime interceptors of the concrete config class","summary":"<p>Build an instance of the config class.</p>","abstract":true,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":15,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L15"},"def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"set(name:String,val:AllTypes)-instance-method","html_id":"set(name:String,val:AllTypes)-instance-method","name":"set","doc":"Generic setter method to set one configuration property. *name* is the fully qualified\nname of the config, while *val* is any valid base type.","summary":"<p>Generic setter method to set one configuration property.</p>","abstract":true,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"AllTypes"}],"args_string":"(name : String, val : AllTypes)","args_html":"(name : String, val : <a href=\"../CrConfig/AllTypes.html\">AllTypes</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":19,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L19"},"def":{"name":"set","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"val","doc":null,"default_value":"","external_name":"val","restriction":"AllTypes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/AllTypes","path":"CrConfig/AllTypes.html","kind":"alias","full_name":"CrConfig::AllTypes","name":"AllTypes","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cr-config/config_base.cr","line_number":11,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_base.cr#L11"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":true,"aliased":"(Array(Bool) | Array(Float32) | Array(Float64) | Array(Int32) | Array(Int64) | Array(String) | Array(UInt32) | Array(UInt64) | Bool | Float32 | Float64 | Int32 | Int64 | String | UInt32 | UInt64)","aliased_html":"Array(Bool) | Array(Float32) | Array(Float64) | Array(Int32) | Array(Int64) | Array(String) | Array(UInt32) | Array(UInt64) | Bool | Float32 | Float64 | Int32 | Int64 | String | UInt32 | UInt64","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":"Represents all base types supported by configuration properties. All configurations must resolve\nto one of these types eventually","summary":"<p>Represents all base types supported by configuration properties.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/BuilderMacro","path":"CrConfig/BuilderMacro.html","kind":"module","full_name":"CrConfig::BuilderMacro","name":"BuilderMacro","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cr-config/builder_macro.cr","line_number":43,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L43"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"}],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":"This module houses the collection of macros that construct the intermediate builder class for the\nconfiguration class. Builders constructed from these macros extend the `AbstractBuilder` class.","summary":"<p>This module houses the collection of macros that construct the intermediate builder class for the configuration class.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"_generate_builder-macro","html_id":"_generate_builder-macro","name":"_generate_builder","doc":"Does exactly what its name implies","summary":"<p>Does exactly what its name implies</p>","abstract":false,"args":[],"args_string":"","location":{"filename":"src/cr-config/builder_macro.cr","line_number":45,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L45"},"def":{"name":"_generate_builder","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      class \n{{ (@type.id.split(\"::\"))[-1].id }}\nConfigBuilder < AbstractBuilder\n        \n{% verbatim do %}\n        macro _get_default_for_type(default, type)\n          {% if default != nil %}\n            {{ default }}\n          {% else %}\n            nil\n          {% end %}\n        end\n\n        {% end %}\n\n\n\n        \n# NOTE: The compiler is not nice if you try to be too clever and abstract out these common blocks of casting\n\n        \n# into another macro / method / recursively, and compile times may increase. Compile with `--stats` to see\n\n        \n# length of time of various compile steps\n\n        def self.coerce(original : AllTypes, intended_type : Class, name_for_error : String) : AllTypes\n          return original if original.class == intended_type\n\n          \n# Edge case that needs to be handled before the below block:\n\n          \n# If original is an array and the intended type is a String, throw an exception, as it's unclear in what way the\n\n          \n# array should be reformatted back into a String\n\n          if original.is_a?(Array) && intended_type == String\n            raise ConfigException.new(name_for_error, ConfigException::Type::ArrayToString, \"Unable to coerce '#{original}' into a type of String, is currently a #{original.class}\")\n          \nend\n\n          \n# TODO: try and be more intelligent about types (i.e. if original is already of type Int, don't convert to String\n\n          \n# to then convert to Int32)\n\n          return \"#{original}\".to_i32 if intended_type == Int32\n          return \"#{original}\".to_i64 if intended_type == Int64\n          return \"#{original}\".to_u32 if intended_type == UInt32\n          return \"#{original}\".to_u64 if intended_type == UInt64\n          return \"#{original}\".to_f32 if intended_type == Float32\n          return \"#{original}\".to_f64 if intended_type == Float64\n          return original.to_s if intended_type == String\n          return (\"#{original}\" == \"true\" ? true : false) if intended_type == Bool\n\n          if intended_type.to_s.starts_with?(\"Array(\") && original.is_a?(String)\n            original = CSV.parse(original)[0]\n          \nend\n\n          if original.is_a?(Array) && intended_type.to_s.starts_with?(\"Array(\")\n            \n{% for i in PrimitiveTypes.union_types %}\n            if intended_type == Array({{ i }})\n              a = [] of {{ i }}\n              original.each do |x|\n                {% if i == Int32 %}a << \"#{x}\".to_i32{% end %}\n                {% if i == Int64 %}a << \"#{x}\".to_i64{% end %}\n                {% if i == Float32 %}a << \"#{x}\".to_f32{% end %}\n                {% if i == Float64 %}a << \"#{x}\".to_f64{% end %}\n                {% if i == UInt32 %}a << \"#{x}\".to_u32{% end %}\n                {% if i == UInt64 %}a << \"#{x}\".to_u64{% end %}\n                {% if i == Bool %}a << (\"#{x}\" == \"true\" ? true : false){% end %}\n                {% if i == String %}a << x.to_s{% end %}\n              end\n              return a\n            end\n            {% end %}\n\n          \nelsif intended_type.to_s.starts_with?(\"Array(\")\n            return [\"#{original}\".to_i32] if intended_type == Array(Int32)\n            return [\"#{original}\".to_i64] if intended_type == Array(Int64)\n            return [\"#{original}\".to_f32] if intended_type == Array(Float32)\n            return [\"#{original}\".to_f64] if intended_type == Array(Float64)\n            return [\"#{original}\".to_u32] if intended_type == Array(UInt32)\n            return [\"#{original}\".to_u64] if intended_type == Array(UInt64)\n            return [\"#{original}\" == \"true\" ? true : false] if intended_type == Array(Bool)\n            return [original.to_s] if intended_type == Array(String)\n          \nend\n\n          \n# We can get here if original is an array and the intended_type isn't\n\n          raise ConfigException.new(name_for_error, ConfigException::Type::ParseError, \"Unable to coerce '#{original}' into a type of #{intended_type}, is currently a #{original.class}\")\n        \nend\n\n        \n{% for name, props in CONFIG_PROPS %}\n        {% if props[:is_base_type] %}\n        property {{ name }} : {{ props[:type] }}{% if props[:nilable] %}{% else %}?{% end %}\n        {% else %}\n        property {{ name }} : {{ props[:base_type] }}::{{ (props[:base_type].id.split(\"::\"))[-1].id }}ConfigBuilder\n        {% end %}\n        {% end %}\n\n\n        @_base_name : String\n\n        def initialize(@_base_name : String)\n          \n{% for name, props in CONFIG_PROPS %}\n          {% if props[:is_base_type] %}\n          @{{ name }} = _get_default_for_type({{ props[:default] }}, {{ props[:base_type] }})\n          {% else %}\n          @{{ name }} = {{ props[:base_type] }}::{{ (props[:base_type].id.split(\"::\"))[-1].id }}ConfigBuilder.new(\"#{@_base_name}{{ name }}.\")\n          {% end %}\n          {% end %}\n\n        \nend\n\n        def set(name : String, val : AllTypes)\n          if name.includes?('.')\n            name, rest = name.split(\".\", 2)\n          \nend\n\n          \n{% if true %}\n          case name.downcase\n            {% for name, props in CONFIG_PROPS %}\n            {% if props[:is_base_type] %}\n            when \"{{ name.downcase }}\"\n              @{{ name }} = {{ (@type.id.split(\"::\"))[-1].id }}ConfigBuilder.coerce(val, {{ props[:base_type] }}, \"{{ name }}\").as({{ props[:base_type] }})\n              return true\n            {% else %}\n            when \"{{ name.downcase }}\"\n              # Check if we were able to parse a subpath from the given path\n              if r = rest\n                return @{{ name }}.set(rest, val)\n              end\n            {% end %}\n            {% end %}\n            # purposely ignore trying to set non-existent values. Could be a dirty config, but not a reason to crash the server\n          end\n          {% end %}\n\n          return false\n        \nend\n\n        private def validate_settings(validators)\n          \n# TODO: gracefully generate a new config?\n\n          \n{% for name, props in CONFIG_PROPS %}\n          {% if props[:nilable] %}{% else %}\n          if @{{ name }}.nil? && !({{ props[:nilable] }})\n            raise ConfigException.new \"#{@_base_name}{{ name }}\", ConfigException::Type::ConfigNotFound, \"Not found in any config source\"\n          end\n          {% end %}\n          {% end %}\n\n\n          \n{% for name, props in CONFIG_PROPS %}\n          {% if props[:is_base_type] %}\n          begin\n            validators.each do |validator|\n              validator.call(\"#{@_base_name}{{ name }}\", @{{ name }})\n            end\n          rescue e : ConfigException\n            raise e\n          rescue e : Exception\n            raise ConfigException.new(\"{{ name }}\", ConfigException::Type::CustomValidationError, e.message || e.to_s)\n          end\n          {% end %}\n          {% end %}\n\n        \nend\n\n        def build(validators = \n{{ @type }}\n._validators, interceptors = \n{{ @type }}\n._runtime_interceptors)\n          validate_settings(validators)\n\n          \n{{ @type }}\n._runtime_interceptors = interceptors\n\n          \n{{ @type }}\n.new(\n            @_base_name,\n            \n{% for name, props in CONFIG_PROPS %}\n            {% if props[:is_base_type] %}\n            @{{ name }}{% if !props[:nilable] %}.not_nil!{% end %},\n            {% else %}\n            @{{ name }}.build(validators, interceptors),\n            {% end %}\n            {% end %}\n\n          )\n        \nend\n      \nend\n    \n"}}],"types":[]},{"html_id":"Crystal Config/CrConfig/ConfigException","path":"CrConfig/ConfigException.html","kind":"class","full_name":"CrConfig::ConfigException","name":"ConfigException","abstract":false,"superclass":{"html_id":"Crystal Config/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"Crystal Config/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/builder_macro.cr","line_number":8,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L8"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":"Exception that gets thrown whenever there's something \"wrong\" with the configuration, such as a\nconfig value not being found through the providers, or not being able to be transformed into the\ncorrect type.","summary":"<p>Exception that gets thrown whenever there's something \"wrong\" with the configuration, such as a config value not being found through the providers, or not being able to be transformed into the correct type.</p>","class_methods":[],"constructors":[{"id":"new(name:String,type:Type,parse_message:String)-class-method","html_id":"new(name:String,type:Type,parse_message:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"},{"name":"parse_message","doc":null,"default_value":"","external_name":"parse_message","restriction":"String"}],"args_string":"(name : String, type : Type, parse_message : String)","args_html":"(name : String, type : <a href=\"../CrConfig/ConfigException/Type.html\">Type</a>, parse_message : String)","location":{"filename":"src/cr-config/builder_macro.cr","line_number":36,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L36"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"},{"name":"parse_message","doc":null,"default_value":"","external_name":"parse_message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, type, parse_message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"The configuration property name that the error was triggered for","summary":"<p>The configuration property name that the error was triggered for</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cr-config/builder_macro.cr","line_number":26,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L26"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"parse_message:String-instance-method","html_id":"parse_message:String-instance-method","name":"parse_message","doc":"Error message\n\nHopefully a more human readable error message that helps identify what caused the problem and how to fix it","summary":"<p>Error message</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/cr-config/builder_macro.cr","line_number":34,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L34"},"def":{"name":"parse_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parse_message"}},{"id":"type:CrConfig::ConfigException::Type-instance-method","html_id":"type:CrConfig::ConfigException::Type-instance-method","name":"type","doc":"The Type of the error","summary":"<p>The Type of the error</p>","abstract":false,"args":[],"args_string":" : CrConfig::ConfigException::Type","args_html":" : <a href=\"../CrConfig/ConfigException/Type.html\">CrConfig::ConfigException::Type</a>","location":{"filename":"src/cr-config/builder_macro.cr","line_number":29,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L29"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type"}}],"macros":[],"types":[{"html_id":"Crystal Config/CrConfig/ConfigException/Type","path":"CrConfig/ConfigException/Type.html","kind":"enum","full_name":"CrConfig::ConfigException::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[{"html_id":"Crystal Config/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"Crystal Config/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"Crystal Config/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/builder_macro.cr","line_number":9,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L9"}],"repository_name":"Crystal Config","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"ConfigNotFound","name":"ConfigNotFound","value":"0","doc":"Config name was not populated from any configuration provider","summary":"<p>Config name was not populated from any configuration provider</p>"},{"id":"ParseError","name":"ParseError","value":"1","doc":"Could not parse / transform a provided configuration value into the correct type","summary":"<p>Could not parse / transform a provided configuration value into the correct type</p>"},{"id":"ArrayToString","name":"ArrayToString","value":"2","doc":"Parsing received an Array object from a provider, but the real type is String. Since string\ndata was likely lost in the conversion to an Array, treat this as an error (instead, the\nstring containing the array should be passed directly to the builder)","summary":"<p>Parsing received an Array object from a provider, but the real type is String.</p>"},{"id":"CustomValidationError","name":"CustomValidationError","value":"3","doc":"A custom configuration validator threw an exception","summary":"<p>A custom configuration validator threw an exception</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/ConfigException","kind":"class","full_name":"CrConfig::ConfigException","name":"ConfigException"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"array_to_string?-instance-method","html_id":"array_to_string?-instance-method","name":"array_to_string?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cr-config/builder_macro.cr","line_number":19,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L19"},"def":{"name":"array_to_string?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ArrayToString"}},{"id":"config_not_found?-instance-method","html_id":"config_not_found?-instance-method","name":"config_not_found?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cr-config/builder_macro.cr","line_number":11,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L11"},"def":{"name":"config_not_found?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ConfigNotFound"}},{"id":"custom_validation_error?-instance-method","html_id":"custom_validation_error?-instance-method","name":"custom_validation_error?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cr-config/builder_macro.cr","line_number":22,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L22"},"def":{"name":"custom_validation_error?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == CustomValidationError"}},{"id":"parse_error?-instance-method","html_id":"parse_error?-instance-method","name":"parse_error?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/cr-config/builder_macro.cr","line_number":14,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/builder_macro.cr#L14"},"def":{"name":"parse_error?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ParseError"}}],"macros":[],"types":[]}]},{"html_id":"Crystal Config/CrConfig/Macros","path":"CrConfig/Macros.html","kind":"module","full_name":"CrConfig::Macros","name":"Macros","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cr-config/config_macros.cr","line_number":3,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_macros.cr#L3"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"}],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":"This module houses the macros for the config class itself, including the static methods used for configuring\nthe parsing, validating, and retreiving of config values.","summary":"<p>This module houses the macros for the config class itself, including the static methods used for configuring the parsing, validating, and retreiving of config values.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"_generate_config_providers-macro","html_id":"_generate_config_providers-macro","name":"_generate_config_providers","doc":"Generates class variable to store the providers, validators, interceptors, and the already parsed instance of\nthe config class, if already parsed.","summary":"<p>Generates class variable to store the providers, validators, interceptors, and the already parsed instance of the config class, if already parsed.</p>","abstract":false,"args":[],"args_string":"","location":{"filename":"src/cr-config/config_macros.cr","line_number":6,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_macros.cr#L6"},"def":{"name":"_generate_config_providers","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    @@_runtime_interceptors = [] of Proc(String, AllTypes?, AllTypes?)\n    @@_providers = [] of Providers::AbstractProvider\n    @@_validators = [] of Proc(String, AllTypes?, Nil)\n    @@_instance : \n{{ @type }}\n?\n    class_getter _validators\n    class_property _runtime_interceptors\n\n    def self.instance : \n{{ @type }}\n\n      if i = @@_instance\n        return i\n      \nend\n      @@_instance = self.load\n      @@_instance.not_nil!\n    \nend\n\n    def self.reset\n      @@_runtime_interceptors.clear\n      @@_providers.clear\n      @@_validators.clear\n      @@_instance = nil\n    \nend\n\n    def self.validator(&block : (String, AllTypes?) -> Nil)\n      @@_validators << block\n    \nend\n\n    def self.runtime_interceptor(&block : (String, AllTypes?) -> AllTypes?)\n      @@_runtime_interceptors << block\n    \nend\n\n    def self.provider(provider : Providers::AbstractProvider)\n      @@_providers << provider\n      \n{{ @type }}\n\n    \nend\n\n    def self.provider(&block : AbstractBuilder -> Nil)\n      @@_providers << Providers::ProcProvider.new(block)\n      \n{{ @type }}\n\n    \nend\n\n    def self.providers(&block)\n      providers = yield\n      if providers.is_a?(Array)\n        @@_providers = providers.map &.as(Providers::AbstractProvider)\n      \nelsif providers.is_a?(Providers::AbstractProvider)\n        @@_providers = [providers.as(Providers::AbstractProvider)]\n      \nend\n    \nend\n\n    def self.providers\n      @@_providers\n    \nend\n  \n"}},{"id":"_generate_constructor-macro","html_id":"_generate_constructor-macro","name":"_generate_constructor","doc":"Generates the comprehensive and exhaustive `initialize` method for this configuration class. All properties are included","summary":"<p>Generates the comprehensive and exhaustive <code>initialize</code> method for this configuration class.</p>","abstract":false,"args":[],"args_string":"","location":{"filename":"src/cr-config/config_macros.cr","line_number":127,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_macros.cr#L127"},"def":{"name":"_generate_constructor","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    def initialize(base_name : String, \n{% for name, prop in CONFIG_PROPS %}\n      @{{ name }} : {{ prop[:type] }},\n    {% end %}\n)\n      \n# property name to fully qualified name (i.e. \"prop2\" => \"prop1.sub.prop2\")\n\n      @_names = \n{} of String => String\n      \n{% for name, prop in CONFIG_PROPS %}\n      {% if prop[:is_base_type] %}\n      @_names[\"{{ name }}\"] = \"#{base_name}{{ name }}\"\n      {% end %}\n      {% end %}\n\n    \nend\n  \n"}},{"id":"_generate_getters-macro","html_id":"_generate_getters-macro","name":"_generate_getters","doc":"Generates getter methods for the config class. The `[]` and `[]?` methods are also generated, using the config name dot notation\nto retreive the value.","summary":"<p>Generates getter methods for the config class.</p>","abstract":false,"args":[],"args_string":"","location":{"filename":"src/cr-config/config_macros.cr","line_number":75,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_macros.cr#L75"},"def":{"name":"_generate_getters","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% for name, val in CONFIG_PROPS %}\n      {% if val[:is_base_type] %}\n      @{{ name }} : {{ val[:type] }}\n\n      def {{ name }} : {{ val[:type] }}\n        full_name = @_names[\"{{ name }}\"]\n        @@_runtime_interceptors.each do |proc|\n          if p = proc.call(full_name, @{{ name }})\n            return p.as({{ val[:base_type] }})\n          end\n        end\n        @{{ name }}\n      end\n      {% else %}\n      getter {{ name }} : {{ val[:type] }}\n      {% end %}\n    {% end %}\n\n\n    def []?(key : String)\n      true_key = key\n      rest = \"\"\n      true_key, rest = key.split('.', 2) if key.includes?('.')\n\n      \n{% if true %}\n      case true_key\n      {% for name, props in CONFIG_PROPS %}\n      {% if props[:is_base_type] %}\n      when \"{{ name }}\"\n        # If we're here, and there's a '.' in the initial key, we're treating a primitive as a subconfiguration\n        return nil if key.includes?('.')\n        return {{ name }}\n      {% else %}\n      when \"{{ name }}\"\n        return @{{ name }}[rest]\n      {% end %}\n      {% end %}\n      else\n        return nil\n      end\n      {% end %}\n\n    \nend\n\n    def [](key : String)\n      if val = self[key]?\n        return val\n      \nend\n      raise KeyError.new(\"Missing configuration key #{key}\")\n    \nend\n  \n"}},{"id":"_validate_properties-macro","html_id":"_validate_properties-macro","name":"_validate_properties","doc":"Macro for validating all `option` properties are of valid types, being either something in `AllTypes`, or another configuration class","summary":"<p>Macro for validating all <code>option</code> properties are of valid types, being either something in <code><a href=\"../CrConfig/AllTypes.html\">AllTypes</a></code>, or another configuration class</p>","abstract":false,"args":[],"args_string":"","location":{"filename":"src/cr-config/config_macros.cr","line_number":62,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_macros.cr#L62"},"def":{"name":"_validate_properties","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% for name, props in CONFIG_PROPS %}\n      {% base_type = props[:base_type].id %}\n      {% possible_base_type = @type.id.includes?(\"::\") ? \"#{((@type.id.split(\"::\"))[0..-2].join(\"::\")).id}::#{base_type}\".id : base_type %}\n      {% sub_configs = CrConfig.includers.map do |x|\n  x.id\nend %}\n      {% if ((SUPPORTED_TYPES.includes?(\"#{base_type}\")) || (sub_configs.includes?(base_type))) || (sub_configs.includes?(possible_base_type)) %}{% else %}\n        {% raise(\"Property #{name} in #{@type} is not a supported type (#{base_type}). Config types allowed are #{SUPPORTED_TYPES}, or any includers of CrConfig (#{sub_configs})\") %}\n      {% end %}\n    {% end %}\n\n  \n"}}],"types":[]},{"html_id":"Crystal Config/CrConfig/PrimitiveTypes","path":"CrConfig/PrimitiveTypes.html","kind":"alias","full_name":"CrConfig::PrimitiveTypes","name":"PrimitiveTypes","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cr-config/config_base.cr","line_number":9,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/config_base.cr#L9"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float32 | Float64 | Int32 | Int64 | String | UInt32 | UInt64)","aliased_html":"Bool | Float32 | Float64 | Int32 | Int64 | String | UInt32 | UInt64","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":"Base types supported by configuration classes. These and `Array(*)` of these make up the `AllTypes` alias.","summary":"<p>Base types supported by configuration classes.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers","path":"CrConfig/Providers.html","kind":"module","full_name":"CrConfig::Providers","name":"Providers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":22,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L22"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig","kind":"module","full_name":"CrConfig","name":"CrConfig"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","path":"CrConfig/Providers/AbstractProvider.html","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider","abstract":true,"superclass":{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":30,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L30"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"Crystal Config/CrConfig/Providers/CommandLineParser","kind":"class","full_name":"CrConfig::Providers::CommandLineParser","name":"CommandLineParser"},{"html_id":"Crystal Config/CrConfig/Providers/DotenvProvider","kind":"class","full_name":"CrConfig::Providers::DotenvProvider","name":"DotenvProvider"},{"html_id":"Crystal Config/CrConfig/Providers/EnvVarProvider","kind":"class","full_name":"CrConfig::Providers::EnvVarProvider","name":"EnvVarProvider"},{"html_id":"Crystal Config/CrConfig/Providers/FolderConfigProvider","kind":"class","full_name":"CrConfig::Providers::FolderConfigProvider","name":"FolderConfigProvider"},{"html_id":"Crystal Config/CrConfig/Providers/JsonProvider","kind":"class","full_name":"CrConfig::Providers::JsonProvider","name":"JsonProvider"},{"html_id":"Crystal Config/CrConfig/Providers/ProcProvider","kind":"class","full_name":"CrConfig::Providers::ProcProvider","name":"ProcProvider"},{"html_id":"Crystal Config/CrConfig/Providers/SimpleFileProvider","kind":"class","full_name":"CrConfig::Providers::SimpleFileProvider","name":"SimpleFileProvider"},{"html_id":"Crystal Config/CrConfig/Providers/YamlProvider","kind":"class","full_name":"CrConfig::Providers::YamlProvider","name":"YamlProvider"}],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Base class for all providers.\n\nA configuration provider represents a single source for where configuration values can be\nread from, whether it be from a configuration file (`SimpleFileProvider`), and environment\nvariable (`EnvVarProvider`), or even a custom location (see `ProcProvider`). Configuration\nproviders have their `populate` method invoked during the building of the configuration class\nwhich lets them provide what config values they have available.","summary":"<p>Base class for all providers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":true,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":34,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L34"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/CommandLineParser","path":"CrConfig/Providers/CommandLineParser.html","kind":"class","full_name":"CrConfig::Providers::CommandLineParser","name":"CommandLineParser","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":83,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L83"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Provider that looks through provided command line arguments for configuration overrides\n\nThis provider assumes all configurations will be supplied in the format of `--config.name=new_val` . To make this approach workable with OptionParser,\nany configurations discovered through command line arguments will be removed from the ARGV array, so that OptionParser won't error for unrecognized options.\nThis requires the configuration class to be constructed _before_ the `OptionParser.parse` method gets called.","summary":"<p>Provider that looks through provided command line arguments for configuration overrides</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":84,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L84"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"consumed = [] of String\nARGV.each do |arg|\n  if arg.includes?(\"=\")\n    name, val = arg.split(/\\s*=\\s*/, 2)\n    if name.starts_with?(\"--\")\n      name = name[2..-1]\n    end\n    if bob.set(name, val)\n      consumed << arg\n    end\n  end\nend\nconsumed.each do |arg|\n  ARGV.delete(arg)\nend\n"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/DotenvProvider","path":"CrConfig/Providers/DotenvProvider.html","kind":"class","full_name":"CrConfig::Providers::DotenvProvider","name":"DotenvProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":172,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L172"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Converts a .env string into configuration values that can be used\n\nThis provider will treat each line as a configuration name / value pair, and assumes each line is of the format:\n```\n# Comments are supported in this format, any line beginning with a '#' will be ignored\nconfiguration.name.here = my configuration value\n```","summary":"<p>Converts a .env string into configuration values that can be used</p>","class_methods":[],"constructors":[{"id":"new(source:String)-class-method","html_id":"new(source:String)-class-method","name":"new","doc":"Construct this with the contents of an .env file","summary":"<p>Construct this with the contents of an .env file</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : String)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":174,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L174"},"def":{"name":"new","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":177,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L177"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(@source.split(\"\\n\")).each do |line|\n  if (line.starts_with?(/\\s*#/)) || line.strip.empty?\n    next\n  end\n  prop, val = line.split(/\\s*=\\s*/)\n  bob.set(prop, val)\nend"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/EnvVarProvider","path":"CrConfig/Providers/EnvVarProvider.html","kind":"class","full_name":"CrConfig::Providers::EnvVarProvider","name":"EnvVarProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":63,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L63"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Provider that looks up configurations from environment variables\n\nEnvironment variable names are downcased and `_` characters get replaced by a `.`. i.e. CLIENT_HOST will change into client.host .\nCan optionally be constructed with a prefix that will be removed from environment variable names so it can align with the correct\nconfiguration name.\n\n```\n# constructing this...\nCrConfig::Providers::EnvVarProvider.new(\"MY_SERVER_\")\n\n# ...will cause this environment variable to be set for \"client.host\"\nENV[\"MY_SERVER_CLIENT_HOST\"] = \"different.example.com\"\n```","summary":"<p>Provider that looks up configurations from environment variables</p>","class_methods":[],"constructors":[{"id":"new(prefix=&quot;&quot;)-class-method","html_id":"new(prefix=&quot;&quot;)-class-method","name":"new","doc":"*prefix* is an optional parameter for defining the environment variable prefixes","summary":"<p><em>prefix</em> is an optional parameter for defining the environment variable prefixes</p>","abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"\"\"","external_name":"prefix","restriction":""}],"args_string":"(prefix = <span class=\"s\">&quot;&quot;</span>)","args_html":"(prefix = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":65,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L65"},"def":{"name":"new","args":[{"name":"prefix","doc":null,"default_value":"\"\"","external_name":"prefix","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(prefix)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":68,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L68"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ENV.each do |env_name, env_val|\n  env_name = env_name.gsub(@prefix, \"\")\n  name = env_name.downcase.gsub(/_/, '.')\n  bob.set(name, env_val)\nend"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/FolderConfigProvider","path":"CrConfig/Providers/FolderConfigProvider.html","kind":"class","full_name":"CrConfig::Providers::FolderConfigProvider","name":"FolderConfigProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":246,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L246"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Handles and loads up an entire directory of configuration files\n\nThis provider is best used when there is a single \"base\" configuration file that has all configurations\ndefined, and then other configuration files can be layered on top of that one, providing overrides based\non the environment the application runs in.\n\nThis provider has lots of configuration switches that can be used when loading files from a directory\n```\n# Assume directory `configs` exists and contains `config-base.yaml`, `config-test.yaml`, `config-local.yaml`, and `config-prod.yaml`\n\nCrConfig::Providers::FolderConfigProvirer.new\n  .folder(\"configs\")\n  .separator(\"-\")\n  .base_file(\"config.yaml\")\n  .profiles do\n    # Here is where a list of \"profiles\" of configurations can be provided.\n    # These can be obtained from anywhere that's appropriate (obviously before\n    # configuration has completed being read in), such as an environment variable.\n    [\"base\", \"test\", \"prod\"]\n  end\n```\nThe above provider, when its `populate` method is called, will read in and load `config-base.yaml`, `config-test.yaml`, and `config-prod.yaml`,\nin that order, leaving the production configurations as having the highest precedence. `config-local.yaml` won't be read, and a file named\n`config.yaml` doesn't need to exist.","summary":"<p>Handles and loads up an entire directory of configuration files</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"base_file(base_file:String)-instance-method","html_id":"base_file(base_file:String)-instance-method","name":"base_file","doc":"Base name for the configuration files","summary":"<p>Base name for the configuration files</p>","abstract":false,"args":[{"name":"base_file","doc":null,"default_value":"","external_name":"base_file","restriction":"String"}],"args_string":"(base_file : String)","args_html":"(base_file : String)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":260,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L260"},"def":{"name":"base_file","args":[{"name":"base_file","doc":null,"default_value":"","external_name":"base_file","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@base_file = base_file\nself\n"}},{"id":"folder(folder_path:String)-instance-method","html_id":"folder(folder_path:String)-instance-method","name":"folder","doc":"Base folder path to read config files from, relative from where the server is running from","summary":"<p>Base folder path to read config files from, relative from where the server is running from</p>","abstract":false,"args":[{"name":"folder_path","doc":null,"default_value":"","external_name":"folder_path","restriction":"String"}],"args_string":"(folder_path : String)","args_html":"(folder_path : String)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":255,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L255"},"def":{"name":"folder","args":[{"name":"folder_path","doc":null,"default_value":"","external_name":"folder_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@folder_path = folder_path\nself\n"}},{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"Will read in and and load files, used the `SimpleFileProvider` to perform the actual file reading, configuration files under\n`\"#{@filder_path}/#{file_name}\"`, for every file name constructed from the `@base_file` and list of `profiles` provided.\n\nGiven base file name `config.json`, a list of profiles `[\"prof1\"]`, and separator of `_`, this will attempt to load all files\nin `[\"config_prof1.json\"]` under the provided folder_path. The profiles and separator are inserted where the file extension is found in the base file name.","summary":"<p>Will read in and and load files, used the <code><a href=\"../../CrConfig/Providers/SimpleFileProvider.html\">SimpleFileProvider</a></code> to perform the actual file reading, configuration files under <code>\"#{@filder_path}/#{file_name}\"</code>, for every file name constructed from the <code>@base_file</code> and list of <code><a href=\"../../CrConfig/Providers/FolderConfigProvider.html#profiles(&block:-%3EArray(String))-instance-method\">#profiles</a></code> provided.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":275,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L275"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (@folder_path && (File.exists?(@folder_path.not_nil!))) && @base_file\n  if profs = @profiles\n    profiles = profs.call\n  else\n    profiles = [] of String\n  end\n  profiles.unshift(\"\")\n  base_file = @base_file.not_nil!\n  suffix, name = base_file.reverse.split(\".\", 2)\n  name = name.reverse\n  suffix = suffix.reverse\n  profiles.each do |profile|\n    if profile.size > 0\n      profile = \"#{@profile_separator}#{profile}\"\n    end\n    file_name = \"#{name}#{profile}.#{suffix}\"\n    s = CrConfig::Providers::SimpleFileProvider.new(\"#{@folder_path}/#{file_name}\")\n    s.populate(bob)\n  end\nend"}},{"id":"profiles(&block:->Array(String))-instance-method","html_id":"profiles(&block:->Array(String))-instance-method","name":"profiles","doc":"Block to be run when determining which \"profiles\" to load","summary":"<p>Block to be run when determining which \"profiles\" to load</p>","abstract":false,"args":[],"args_string":"(&block :  -> Array(String))","args_html":"(&block :  -> Array(String))","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":265,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L265"},"def":{"name":"profiles","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> Array(String))"},"return_type":"","visibility":"Public","body":"@profiles = block\nself\n"}},{"id":"separator(profile_separator:String)-instance-method","html_id":"separator(profile_separator:String)-instance-method","name":"separator","doc":"Seperator to use when constructing the different profile versions of the config file. See `#populate` for details on file construction","summary":"<p>Seperator to use when constructing the different profile versions of the config file.</p>","abstract":false,"args":[{"name":"profile_separator","doc":null,"default_value":"","external_name":"profile_separator","restriction":"String"}],"args_string":"(profile_separator : String)","args_html":"(profile_separator : String)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":250,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L250"},"def":{"name":"separator","args":[{"name":"profile_separator","doc":null,"default_value":"","external_name":"profile_separator","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@profile_separator = profile_separator\nself\n"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/JsonProvider","path":"CrConfig/Providers/JsonProvider.html","kind":"class","full_name":"CrConfig::Providers::JsonProvider","name":"JsonProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":99,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L99"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Converts a JSON string into configuration values that can be used","summary":"<p>Converts a JSON string into configuration values that can be used</p>","class_methods":[],"constructors":[{"id":"new(json_source:String|IO)-class-method","html_id":"new(json_source:String|IO)-class-method","name":"new","doc":"Construct this with the JSON string or IO that will be parsed and used in the populate method","summary":"<p>Construct this with the JSON string or IO that will be parsed and used in the populate method</p>","abstract":false,"args":[{"name":"json_source","doc":null,"default_value":"","external_name":"json_source","restriction":"String | IO"}],"args_string":"(json_source : String | IO)","args_html":"(json_source : String | IO)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":101,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L101"},"def":{"name":"new","args":[{"name":"json_source","doc":null,"default_value":"","external_name":"json_source","restriction":"String | IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(json_source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":105,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L105"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h = {} of String => JSON::Any\nadd_or_recurse(h, \"\", @json_source)\nh.each do |key, val|\n  if val.as_a?\n    a = val.as_a.map do |x|\n      x.to_s\n    end\n    bob.set(key, a)\n  else\n    bob.set(key, val.raw.as(AllTypes))\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/ProcProvider","path":"CrConfig/Providers/ProcProvider.html","kind":"class","full_name":"CrConfig::Providers::ProcProvider","name":"ProcProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":40,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L40"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Provider class that wraps a `Proc(AbstractBuilder, Nil)`\n\nThis class is used to store the block that gets passed in through the `MyConfig.provider` method","summary":"<p>Provider class that wraps a <code>Proc(<a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>, Nil)</code></p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":45,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L45"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@proc.call(bob)"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/SimpleFileProvider","path":"CrConfig/Providers/SimpleFileProvider.html","kind":"class","full_name":"CrConfig::Providers::SimpleFileProvider","name":"SimpleFileProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":196,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L196"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Provider that delegates to the `JsonProvider`, `YamlProvider`, and the `DotenvProvider` based on file extension\n\nThis provider will handle reading in a file and using the appropriate standard configuration provider based on the file\nextension of the *file_name*\n\nMapping for file extensions works as:\n.json               => `JsonProvider`\n.yaml or .yml       => `YamlProvider`\n.env or .properties => `DotenvProvider`","summary":"<p>Provider that delegates to the <code><a href=\"../../CrConfig/Providers/JsonProvider.html\">JsonProvider</a></code>, <code><a href=\"../../CrConfig/Providers/YamlProvider.html\">YamlProvider</a></code>, and the <code><a href=\"../../CrConfig/Providers/DotenvProvider.html\">DotenvProvider</a></code> based on file extension</p>","class_methods":[],"constructors":[{"id":"new(file_name:String)-class-method","html_id":"new(file_name:String)-class-method","name":"new","doc":"*file_name* is relative to where the application is running from","summary":"<p><em>file_name</em> is relative to where the application is running from</p>","abstract":false,"args":[{"name":"file_name","doc":null,"default_value":"","external_name":"file_name","restriction":"String"}],"args_string":"(file_name : String)","args_html":"(file_name : String)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":198,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L198"},"def":{"name":"new","args":[{"name":"file_name","doc":null,"default_value":"","external_name":"file_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(file_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":201,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L201"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if File.exists?(@file_name)\nelse\n  return\nend\nfile_contents = File.read(@file_name)\ncase @file_name\nwhen .ends_with?(\".json\")\n  deleg = JsonProvider.new(file_contents)\n  deleg.populate(bob)\nwhen .ends_with?(\".yaml\"), .ends_with?(\".yml\")\n  deleg = YamlProvider.new(file_contents)\n  deleg.populate(bob)\nwhen .ends_with?(\".env\"), .ends_with?(\".properties\")\n  deleg = DotenvProvider.new(file_contents)\n  deleg.populate(bob)\nelse\n  raise(\"Unsupported file type #{@file_name}, expected \\\".json\\\", \\\".yaml\\\", \\\".yml\\\", or \\\".env\\\"\")\nend\n"}}],"macros":[],"types":[]},{"html_id":"Crystal Config/CrConfig/Providers/YamlProvider","path":"CrConfig/Providers/YamlProvider.html","kind":"class","full_name":"CrConfig::Providers::YamlProvider","name":"YamlProvider","abstract":false,"superclass":{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},"ancestors":[{"html_id":"Crystal Config/CrConfig/Providers/AbstractProvider","kind":"class","full_name":"CrConfig::Providers::AbstractProvider","name":"AbstractProvider"},{"html_id":"Crystal Config/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Crystal Config/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cr-config/abstract_provider.cr","line_number":133,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L133"}],"repository_name":"Crystal Config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Crystal Config/CrConfig/Providers","kind":"module","full_name":"CrConfig::Providers","name":"Providers"},"doc":"Converts a YAML string into configuration values that can be used","summary":"<p>Converts a YAML string into configuration values that can be used</p>","class_methods":[],"constructors":[{"id":"new(yaml_source:String)-class-method","html_id":"new(yaml_source:String)-class-method","name":"new","doc":"Construct this with the YAML string that will be parsed and used in the populate method","summary":"<p>Construct this with the YAML string that will be parsed and used in the populate method</p>","abstract":false,"args":[{"name":"yaml_source","doc":null,"default_value":"","external_name":"yaml_source","restriction":"String"}],"args_string":"(yaml_source : String)","args_html":"(yaml_source : String)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":135,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L135"},"def":{"name":"new","args":[{"name":"yaml_source","doc":null,"default_value":"","external_name":"yaml_source","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(yaml_source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"populate(bob:AbstractBuilder)-instance-method","html_id":"populate(bob:AbstractBuilder)-instance-method","name":"populate","doc":"This method gets called with the instance of the configuration builder during config building.\n\nUse this method to populate the builder with any configuration name / values that this provider... provides","summary":"<p>This method gets called with the instance of the configuration builder during config building.</p>","abstract":false,"args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"args_string":"(bob : AbstractBuilder)","args_html":"(bob : <a href=\"../../CrConfig/AbstractBuilder.html\">AbstractBuilder</a>)","location":{"filename":"src/cr-config/abstract_provider.cr","line_number":139,"url":"https://github.com/vici37/cr-config/blob/master/src/cr-config/abstract_provider.cr#L139"},"def":{"name":"populate","args":[{"name":"bob","doc":null,"default_value":"","external_name":"bob","restriction":"AbstractBuilder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h = {} of String => YAML::Any\nadd_or_recurse(h, \"\", @yaml_source)\nh.each do |key, val|\n  if val.as_a?\n    a = val.as_a.map do |x|\n      x.to_s\n    end\n    bob.set(key, a)\n  else\n    bob.set(key, val.raw.as(AllTypes))\n  end\nend\n"}}],"macros":[],"types":[]}]}]}]}})